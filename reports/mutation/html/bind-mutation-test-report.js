document.querySelector('mutation-test-report-app').report = {"files":{"C:\\ouroboroser\\programming\\pivo-games\\src\\app\\components\\Games\\Games.tsx":{"language":"typescript","mutants":[{"id":"2","location":{"end":{"column":2,"line":20},"start":{"column":28,"line":6}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError","description":"Error message: src/app/views/Profile/Profile.tsx(10,10): error TS2786: 'Games' cannot be used as a JSX component.\r\n  Its return type 'void' is not a valid JSX element.\r\n"}],"source":"import React, {useState, useEffect} from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './Games.scss';\r\n\r\nexport const Games = () => {\r\n  return (\r\n      <div className = 'games'>\r\n          <div className = 'gamesItem'>\r\n            <p className = 'gamesItemWrapper'> <Link className = 'gamesItemWrapperLink' to = '/song'> Song </Link> </p>\r\n          </div>\r\n          <div className = 'gamesItem'>\r\n          <p className = 'gamesItemWrapper'> <Link className = 'gamesItemWrapperLink' to = '/crossword'> Crossword </Link> </p>\r\n          </div>\r\n          <div className = 'gamesItem'>\r\n          <p className = 'gamesItemWrapper'> <Link className = 'gamesItemWrapperLink' to = '/millionare'> Millionare </Link> </p>\r\n          </div>\r\n      </div>\r\n  )\r\n};\r\n"},"C:\\ouroboroser\\programming\\pivo-games\\src\\App.tsx":{"language":"typescript","mutants":[{"id":"0","location":{"end":{"column":4,"line":19},"start":{"column":12,"line":7}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError","description":"Error message: src/App.tsx(7,3): error TS2416: Property 'render' in type 'App' is not assignable to the same property in base type 'Component<{}, {}, any>'.\r\n  Type '() => void' is not assignable to type '() => ReactNode'.\r\n    Type 'void' is not assignable to type 'ReactNode'.\r\nsrc/index.tsx(9,6): error TS2786: 'App' cannot be used as a JSX component.\r\n  Its instance type 'App' is not a valid JSX element.\r\n    The types returned by 'render()' are incompatible between these types.\r\n      Type 'void' is not assignable to type 'ReactNode'.\r\n"}],"source":"import React, {Component, Fragment} from 'react';\nimport { Routing } from './app/routes';\nimport './App.css';\nimport { BrowserRouter as Router, Switch } from 'react-router-dom';\n\nexport class App extends Component {\n  render() {\n    return (\n      <div className = 'App'>\n      <Fragment>\n        <Router>\n          <Switch>\n            <Routing />\n          </Switch>\n        </Router>\n      </Fragment>\n      </div>\n    );\n  }\n}\n\nexport default App;"},"C:\\ouroboroser\\programming\\pivo-games\\src\\app\\components\\Game\\Game.tsx":{"language":"typescript","mutants":[{"id":"1","location":{"end":{"column":2,"line":10},"start":{"column":27,"line":4}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"}],"source":"import React from 'react';\r\nimport './Game.scss';\r\n\r\nexport const Game = () => {\r\n    return (\r\n        <div className = 'game'>\r\n            Game\r\n        </div>\r\n    )\r\n}"},"C:\\ouroboroser\\programming\\pivo-games\\src\\app\\components\\LoginForm\\LoginForm.tsx":{"language":"typescript","mutants":[{"id":"4","location":{"end":{"column":2,"line":67},"start":{"column":32,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError","description":"Error message: src/app/views/Login.tsx(7,12): error TS2786: 'LoginForm' cannot be used as a JSX component.\r\n  Its return type 'void' is not a valid JSX element.\r\nsrc/app/components/__tests__/Login.test.tsx(15,10): error TS2786: 'LoginForm' cannot be used as a JSX component.\r\n  Its return type 'void' is not a valid JSX element.\r\nsrc/app/components/__tests__/Login.test.tsx(48,10): error TS2786: 'LoginForm' cannot be used as a JSX component.\r\n  Its return type 'void' is not a valid JSX element.\r\n"},{"id":"5","location":{"end":{"column":4,"line":13},"start":{"column":21,"line":9}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError","description":"Error message: src/app/components/LoginForm/LoginForm.tsx(11,62): error TS2339: Property 'username' does not exist on type '{}'.\r\nsrc/app/components/LoginForm/LoginForm.tsx(12,62): error TS2339: Property 'password' does not exist on type '{}'.\r\nsrc/app/components/LoginForm/LoginForm.tsx(13,57): error TS2339: Property 'error' does not exist on type '{}'.\r\n"},{"id":"7","location":{"end":{"column":17,"line":11},"start":{"column":15,"line":11}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"3","location":{"end":{"column":43,"line":6},"start":{"column":16,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"8","location":{"end":{"column":17,"line":12},"start":{"column":12,"line":12}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed","description":"Killed by: login correct login test"},{"id":"6","location":{"end":{"column":17,"line":10},"start":{"column":15,"line":10}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"11","location":{"end":{"column":56,"line":25},"start":{"column":23,"line":25}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"9","location":{"end":{"column":4,"line":48},"start":{"column":65,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: login incorrect login test"},{"id":"14","location":{"end":{"column":18,"line":27},"start":{"column":9,"line":27}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"10","location":{"end":{"column":6,"line":23},"start":{"column":18,"line":20}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: login correct login test"},{"id":"12","location":{"end":{"column":56,"line":25},"start":{"column":23,"line":25}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: login correct login test"},{"id":"13","location":{"end":{"column":56,"line":25},"start":{"column":23,"line":25}},"mutatorName":"EqualityOperator","replacement":"Object.entries(data).length === 0","status":"Killed","description":"Killed by: login correct login test"},{"id":"16","location":{"end":{"column":6,"line":45},"start":{"column":20,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: login incorrect login test"},{"id":"15","location":{"end":{"column":18,"line":27},"start":{"column":9,"line":27}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: login correct login test"},{"id":"17","location":{"end":{"column":58,"line":28},"start":{"column":37,"line":28}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: login correct login test"},{"id":"18","location":{"end":{"column":58,"line":28},"start":{"column":37,"line":28}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"19","location":{"end":{"column":58,"line":28},"start":{"column":37,"line":28}},"mutatorName":"EqualityOperator","replacement":"username.length !== 0","status":"Killed","description":"Killed by: login correct login test"},{"id":"21","location":{"end":{"column":58,"line":29},"start":{"column":37,"line":29}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"20","location":{"end":{"column":58,"line":29},"start":{"column":37,"line":29}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: login correct login test"},{"id":"22","location":{"end":{"column":58,"line":29},"start":{"column":37,"line":29}},"mutatorName":"EqualityOperator","replacement":"password.length !== 0","status":"Killed","description":"Killed by: login correct login test"},{"id":"23","location":{"end":{"column":41,"line":31},"start":{"column":11,"line":31}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: login correct login test"},{"id":"25","location":{"end":{"column":41,"line":31},"start":{"column":11,"line":31}},"mutatorName":"LogicalOperator","replacement":"checkUsername && checkPassword","status":"Survived"},{"id":"24","location":{"end":{"column":41,"line":31},"start":{"column":11,"line":31}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: login incorrect login test"},{"id":"28","location":{"end":{"column":8,"line":44},"start":{"column":14,"line":33}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"26","location":{"end":{"column":8,"line":33},"start":{"column":43,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: login incorrect login test"},{"id":"27","location":{"end":{"column":22,"line":32},"start":{"column":18,"line":32}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed","description":"Killed by: login incorrect login test"},{"id":"29","location":{"end":{"column":12,"line":40},"start":{"column":31,"line":36}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"30","location":{"end":{"column":40,"line":39},"start":{"column":34,"line":39}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"31","location":{"end":{"column":12,"line":43},"start":{"column":29,"line":41}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"32","location":{"end":{"column":6,"line":47},"start":{"column":12,"line":45}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"33","location":{"end":{"column":20,"line":46},"start":{"column":16,"line":46}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"34","location":{"end":{"column":100,"line":55},"start":{"column":66,"line":55}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed","description":"Killed by: login correct login test"},{"id":"35","location":{"end":{"column":104,"line":56},"start":{"column":70,"line":56}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed","description":"Killed by: login correct login test"},{"id":"36","location":{"end":{"column":101,"line":57},"start":{"column":10,"line":57}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed","description":"Killed by: login incorrect login test"},{"id":"37","location":{"end":{"column":101,"line":57},"start":{"column":10,"line":57}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed","description":"Killed by: login incorrect login test"},{"id":"40","location":{"end":{"column":60,"line":61},"start":{"column":19,"line":61}},"mutatorName":"StringLiteral","replacement":"``","status":"Survived"},{"id":"38","location":{"end":{"column":101,"line":57},"start":{"column":10,"line":57}},"mutatorName":"LogicalOperator","replacement":"error || <p className='signUpFormError'> Username or password cannot be empty string </p>","status":"Killed","description":"Killed by: login correct login test"},{"id":"39","location":{"end":{"column":91,"line":58},"start":{"column":52,"line":58}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed","description":"Killed by: login incorrect login test"}],"source":"import React, { Fragment, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './LoginForm.scss';\r\n\r\nconst apiUrl = 'http://35.233.79.129/auth';\r\n\r\nexport const LoginForm = () => {\r\n  const initValue = {\r\n    username: '',\r\n    password: '',\r\n    error: false,\r\n  };\r\n\r\n  const [username, setUsername] = useState<string>(initValue.username);\r\n  const [password, setPassword] = useState<string>(initValue.password);\r\n  const [error, setError] = useState<boolean>(initValue.error);\r\n\r\n  const signUpHandler = (username: string, password: string) => {\r\n    const data = {\r\n      username,\r\n      password,\r\n    };\r\n\r\n    const checkData = Object.entries(data).length !== 0;\r\n\r\n    if (checkData) {\r\n      const checkUsername = Boolean(username.length === 0);\r\n      const checkPassword = Boolean(password.length === 0);\r\n\r\n      if (checkUsername || checkPassword) {\r\n        setError(true);\r\n      } else {\r\n        axios\r\n          .post(apiUrl, data)\r\n          .then((response) => {\r\n            console.log(response);\r\n            const token = response.data.token;\r\n            localStorage.setItem('user', JSON.stringify(token));\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      }\r\n    } else {\r\n      setError(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n  <div className='wrappingForm'>\r\n    <div className='signInForm'>\r\n      <div className='signInFormInpt'>\r\n        <p className='signInFormTitle'> Login </p>\r\n        <p> <input placeholder='Name' value={username} onChange={(e) => setUsername(e.target.value)} /> </p>\r\n        <p> <input placeholder='Password' value={password} onChange={(e) => setPassword(e.target.value)} /> </p>\r\n        {error && <p className = 'signUpFormError'> Username or password cannot be empty string </p>}\r\n        <button className='signInFormBtn' onClick={() => signUpHandler(username, password)}> Sign in </button>\r\n      </div>\r\n      <div className='signInFormWrapper'>\r\n        <img src={`${process.env.PUBLIC_URL}/img/login.png`} alt='login' className='signInFormImg' />\r\n        <p className='signInFormLinkWrapper'> <Link to='/signup' className='signInFormLink'> Create an account </Link> </p>\r\n      </div>\r\n    </div>\r\n  </div>      \r\n  );\r\n};\r\n"},"C:\\ouroboroser\\programming\\pivo-games\\src\\app\\components\\SignUpForm\\SignUpForm.tsx":{"language":"typescript","mutants":[{"id":"42","location":{"end":{"column":2,"line":62},"start":{"column":33,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError","description":"Error message: src/app/views/SignUp.tsx(7,8): error TS2786: 'SignUpForm' cannot be used as a JSX component.\r\n  Its return type 'void' is not a valid JSX element.\r\nsrc/app/components/__tests__/SignUpForm.test.tsx(18,34): error TS2786: 'SignUpForm' cannot be used as a JSX component.\r\n  Its return type 'void' is not a valid JSX element.\r\n"},{"id":"41","location":{"end":{"column":38,"line":8},"start":{"column":16,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"43","location":{"end":{"column":54,"line":11},"start":{"column":52,"line":11}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"44","location":{"end":{"column":48,"line":12},"start":{"column":46,"line":12}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"45","location":{"end":{"column":54,"line":13},"start":{"column":52,"line":13}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"46","location":{"end":{"column":68,"line":14},"start":{"column":66,"line":14}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"47","location":{"end":{"column":52,"line":15},"start":{"column":47,"line":15}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed","description":"Killed by: sign up check validation"},{"id":"49","location":{"end":{"column":113,"line":22},"start":{"column":9,"line":22}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"48","location":{"end":{"column":4,"line":38},"start":{"column":106,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"50","location":{"end":{"column":113,"line":22},"start":{"column":9,"line":22}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"52","location":{"end":{"column":80,"line":22},"start":{"column":9,"line":22}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"51","location":{"end":{"column":113,"line":22},"start":{"column":9,"line":22}},"mutatorName":"LogicalOperator","replacement":"(username === undefined || email === undefined || password === undefined) && confirmPassword === undefined","status":"Survived"},{"id":"53","location":{"end":{"column":80,"line":22},"start":{"column":9,"line":22}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"54","location":{"end":{"column":80,"line":22},"start":{"column":9,"line":22}},"mutatorName":"LogicalOperator","replacement":"(username === undefined || email === undefined) && password === undefined","status":"Survived"},{"id":"55","location":{"end":{"column":54,"line":22},"start":{"column":9,"line":22}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"56","location":{"end":{"column":54,"line":22},"start":{"column":9,"line":22}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"57","location":{"end":{"column":54,"line":22},"start":{"column":9,"line":22}},"mutatorName":"LogicalOperator","replacement":"username === undefined && email === undefined","status":"Survived"},{"id":"58","location":{"end":{"column":31,"line":22},"start":{"column":9,"line":22}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"59","location":{"end":{"column":31,"line":22},"start":{"column":9,"line":22}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"60","location":{"end":{"column":31,"line":22},"start":{"column":9,"line":22}},"mutatorName":"EqualityOperator","replacement":"username !== undefined","status":"Survived"},{"id":"61","location":{"end":{"column":54,"line":22},"start":{"column":35,"line":22}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"62","location":{"end":{"column":54,"line":22},"start":{"column":35,"line":22}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"63","location":{"end":{"column":54,"line":22},"start":{"column":35,"line":22}},"mutatorName":"EqualityOperator","replacement":"email !== undefined","status":"Survived"},{"id":"64","location":{"end":{"column":80,"line":22},"start":{"column":58,"line":22}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"65","location":{"end":{"column":80,"line":22},"start":{"column":58,"line":22}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"66","location":{"end":{"column":80,"line":22},"start":{"column":58,"line":22}},"mutatorName":"EqualityOperator","replacement":"password !== undefined","status":"Survived"},{"id":"67","location":{"end":{"column":113,"line":22},"start":{"column":84,"line":22}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"68","location":{"end":{"column":113,"line":22},"start":{"column":84,"line":22}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"69","location":{"end":{"column":113,"line":22},"start":{"column":84,"line":22}},"mutatorName":"EqualityOperator","replacement":"confirmPassword !== undefined","status":"Survived"},{"id":"70","location":{"end":{"column":6,"line":24},"start":{"column":115,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"71","location":{"end":{"column":20,"line":23},"start":{"column":16,"line":23}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"72","location":{"end":{"column":6,"line":37},"start":{"column":12,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"73","location":{"end":{"column":97,"line":25},"start":{"column":12,"line":25}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"74","location":{"end":{"column":97,"line":25},"start":{"column":12,"line":25}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"75","location":{"end":{"column":97,"line":25},"start":{"column":12,"line":25}},"mutatorName":"LogicalOperator","replacement":"(!checkedUsername || !checkedEmail || !checkedPassword) && password !== confirmPassword","status":"Survived"},{"id":"76","location":{"end":{"column":65,"line":25},"start":{"column":12,"line":25}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"77","location":{"end":{"column":65,"line":25},"start":{"column":12,"line":25}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"78","location":{"end":{"column":65,"line":25},"start":{"column":12,"line":25}},"mutatorName":"LogicalOperator","replacement":"(!checkedUsername || !checkedEmail) && !checkedPassword","status":"Survived"},{"id":"79","location":{"end":{"column":45,"line":25},"start":{"column":12,"line":25}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"80","location":{"end":{"column":45,"line":25},"start":{"column":12,"line":25}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"81","location":{"end":{"column":45,"line":25},"start":{"column":12,"line":25}},"mutatorName":"LogicalOperator","replacement":"!checkedUsername && !checkedEmail","status":"Survived"},{"id":"82","location":{"end":{"column":28,"line":25},"start":{"column":12,"line":25}},"mutatorName":"BooleanLiteral","replacement":"checkedUsername","status":"Survived"},{"id":"83","location":{"end":{"column":45,"line":25},"start":{"column":32,"line":25}},"mutatorName":"BooleanLiteral","replacement":"checkedEmail","status":"Survived"},{"id":"84","location":{"end":{"column":65,"line":25},"start":{"column":49,"line":25}},"mutatorName":"BooleanLiteral","replacement":"checkedPassword","status":"Survived"},{"id":"85","location":{"end":{"column":97,"line":25},"start":{"column":69,"line":25}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"86","location":{"end":{"column":97,"line":25},"start":{"column":69,"line":25}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"87","location":{"end":{"column":97,"line":25},"start":{"column":69,"line":25}},"mutatorName":"EqualityOperator","replacement":"password === confirmPassword","status":"Survived"},{"id":"91","location":{"end":{"column":33,"line":29},"start":{"column":17,"line":29}},"mutatorName":"ArithmeticOperator","replacement":"apiUrl - '/user'","status":"CompileError","description":"Error message: src/app/components/SignUpForm/SignUpForm.tsx(29,17): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\r\nsrc/app/components/SignUpForm/SignUpForm.tsx(29,17): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\r\nsrc/app/components/SignUpForm/SignUpForm.tsx(29,26): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\r\n"},{"id":"88","location":{"end":{"column":8,"line":27},"start":{"column":99,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"89","location":{"end":{"column":22,"line":26},"start":{"column":18,"line":26}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"90","location":{"end":{"column":8,"line":36},"start":{"column":14,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"92","location":{"end":{"column":33,"line":29},"start":{"column":26,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"93","location":{"end":{"column":78,"line":29},"start":{"column":35,"line":29}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"94","location":{"end":{"column":76,"line":29},"start":{"column":70,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"95","location":{"end":{"column":12,"line":32},"start":{"column":31,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"96","location":{"end":{"column":12,"line":35},"start":{"column":29,"line":33}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"97","location":{"end":{"column":104,"line":46},"start":{"column":70,"line":46}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"98","location":{"end":{"column":99,"line":47},"start":{"column":68,"line":47}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"99","location":{"end":{"column":108,"line":48},"start":{"column":74,"line":48}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"100","location":{"end":{"column":121,"line":49},"start":{"column":80,"line":49}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"101","location":{"end":{"column":119,"line":50},"start":{"column":56,"line":50}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"102","location":{"end":{"column":79,"line":51},"start":{"column":14,"line":51}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"103","location":{"end":{"column":79,"line":51},"start":{"column":14,"line":51}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"105","location":{"end":{"column":66,"line":54},"start":{"column":23,"line":54}},"mutatorName":"StringLiteral","replacement":"``","status":"Survived"},{"id":"104","location":{"end":{"column":79,"line":51},"start":{"column":14,"line":51}},"mutatorName":"LogicalOperator","replacement":"error || <p className='signUpFormError'> Data is not correct </p>","status":"Killed","description":"Killed by: sign up check validation"}],"source":"import React, { Fragment, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './SignUpForm.scss';\r\n\r\nimport { nameIsValid, emailIsValid, passwordIsValid } from '../validation';\r\n\r\nconst apiUrl = 'http://35.233.79.129';\r\n\r\nexport const SignUpForm = () => {\r\n  const [username, setUsername] = useState<string>('');\r\n  const [email, setEmail] = useState<string>('');\r\n  const [password, setPassword] = useState<string>('');\r\n  const [confirmPassword, setConfirmPassword] = useState<string>('');\r\n  const [error, setError] = useState<boolean>(false);\r\n\r\n  const signUpHandler = (username: string, email: string, password: string, confirmPassword: string ) => {\r\n    const checkedUsername = nameIsValid(username);\r\n    const checkedEmail = emailIsValid(email);\r\n    const checkedPassword = passwordIsValid(password);\r\n\r\n    if (username === undefined || email === undefined || password === undefined || confirmPassword === undefined) {\r\n      setError(true);\r\n    } else {\r\n      if ( !checkedUsername || !checkedEmail || !checkedPassword || password !== confirmPassword) {\r\n        setError(true);\r\n      } else {\r\n        axios\r\n          .post(apiUrl + '/user', { username, password, email, role: 'user' })\r\n          .then((response) => {\r\n            console.log(response);\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className='wrappingForm'>\r\n        <div className='signUpForm'>\r\n          <div className='signUpFormInpt'>\r\n            <p className='signUpFormTitle'> Registration </p>\r\n            <p> <input placeholder='Name' value={username} onChange={(e) => setUsername(e.target.value)} /> </p>\r\n            <p> <input placeholder='Email' value={email} onChange={(e) => setEmail(e.target.value)} /> </p>\r\n            <p> <input placeholder='Password' value={password} onChange={(e) => setPassword(e.target.value)} /> </p>\r\n            <p> <input placeholder='Confirm' value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} /> </p>\r\n            <button className='signUpFormBtn' onClick={() => signUpHandler(username, email, password, confirmPassword)} > Sign up </button>\r\n            {error && <p className='signUpFormError'> Data is not correct </p>}\r\n          </div>\r\n          <div className='signUpFormWrapper'>\r\n            <img src={`${process.env.PUBLIC_URL}/img/welcome.png`} alt='registration' className='signUpFormImg' />\r\n            <p className='signUpFormLinkWrapper'> <Link to='/login' className='signUpFormLink'> I am already member </Link>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n"},"C:\\ouroboroser\\programming\\pivo-games\\src\\app\\components\\Statistics\\Statistics.tsx":{"language":"typescript","mutants":[{"id":"106","location":{"end":{"column":2,"line":9},"start":{"column":33,"line":4}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError","description":"Error message: src/app/components/User/User.tsx(38,12): error TS2786: 'Statistics' cannot be used as a JSX component.\r\n  Its return type 'void' is not a valid JSX element.\r\n"}],"source":"import React from 'react';\r\nimport './Statistics.scss';\r\n\r\nexport const Statistics = () => {\r\n    return (\r\n        <div className = 'statistics'>\r\n        </div>\r\n    )\r\n}"},"C:\\ouroboroser\\programming\\pivo-games\\src\\app\\components\\User\\User.tsx":{"language":"typescript","mutants":[{"id":"107","location":{"end":{"column":2,"line":43},"start":{"column":27,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError","description":"Error message: src/app/views/Profile/Profile.tsx(9,10): error TS2786: 'User' cannot be used as a JSX component.\r\n  Its return type 'void' is not a valid JSX element.\r\n"},{"id":"109","location":{"end":{"column":4,"line":21},"start":{"column":19,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"108","location":{"end":{"column":53,"line":10},"start":{"column":15,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"110","location":{"end":{"column":6,"line":17},"start":{"column":25,"line":15}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"111","location":{"end":{"column":6,"line":20},"start":{"column":23,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"}],"source":"import React, { Fragment, useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport { Statistics } from '../Statistics/Statistics';\r\nimport './User.scss';\r\n\r\nexport const User = () => {\r\n  //const [username, ]\r\n  const api = 'http://35.233.79.129/user/sovasova10';\r\n\r\n  useEffect(() => {\r\n    axios\r\n    .get(api)\r\n    .then((response) => {\r\n      console.log(response.data.user);\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n    });\r\n  })\r\n  return (\r\n    <Fragment>\r\n      <div className='user'>\r\n        <div className='userInfo'>\r\n          <div className='userInfoAvatar'></div>\r\n          <div className='userInfoBio'>\r\n              <p className = 'userInfoBioName'> Username Username </p>\r\n              <p className = 'userInfoBioBio'> student </p>\r\n              <p className = 'userInfoBioLocation'> Kyiv, Ukraine </p>\r\n          </div>\r\n        </div>\r\n        <div className = 'userLink'>\r\n          <p className = 'userLinkWrapper'> <Link className = 'userLinkWrapperLink' to = '/edit'> Edit profile </Link> </p>\r\n          <p className = 'userLinkWrapper'> <Link className = 'userLinkWrapperLink' to = '/edit'> Exit </Link> </p>\r\n        </div>\r\n        <div className = 'userstatisticsBlock'>\r\n          <Statistics />\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n"},"C:\\ouroboroser\\programming\\pivo-games\\src\\app\\components\\__tests__\\Login.test.tsx":{"language":"typescript","mutants":[{"id":"112","location":{"end":{"column":17,"line":7},"start":{"column":10,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"113","location":{"end":{"column":2,"line":72},"start":{"column":25,"line":7}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError","description":"Error message: undefinedYour test suite must contain at least one test. Error: Your test suite must contain at least one test.\n    at onResult (C:\\ouroboroser\\programming\\pivo-games\\node_modules\\@jest\\core\\build\\TestScheduler.js:175:18)\n    at C:\\ouroboroser\\programming\\pivo-games\\node_modules\\@jest\\core\\build\\TestScheduler.js:304:17\n    at C:\\ouroboroser\\programming\\pivo-games\\node_modules\\emittery\\index.js:260:13\n    at Array.map (<anonymous>)\n    at Emittery.Typed.emit (C:\\ouroboroser\\programming\\pivo-games\\node_modules\\emittery\\index.js:258:23)"},{"id":"116","location":{"end":{"column":10,"line":12},"start":{"column":29,"line":9}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError","description":"Error message: src/app/components/__tests__/Login.test.tsx(20,73): error TS2339: Property 'username' does not exist on type '{}'.\r\nsrc/app/components/__tests__/Login.test.tsx(21,73): error TS2339: Property 'password' does not exist on type '{}'.\r\n"},{"id":"114","location":{"end":{"column":28,"line":8},"start":{"column":8,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"115","location":{"end":{"column":6,"line":39},"start":{"column":42,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"117","location":{"end":{"column":35,"line":10},"start":{"column":23,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed","description":"Killed by: login correct login test"},{"id":"118","location":{"end":{"column":35,"line":11},"start":{"column":23,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed","description":"Killed by: login correct login test"},{"id":"119","location":{"end":{"column":85,"line":23},"start":{"column":42,"line":23}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: login correct login test"},{"id":"120","location":{"end":{"column":83,"line":23},"start":{"column":52,"line":23}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: login correct login test"},{"id":"121","location":{"end":{"column":85,"line":24},"start":{"column":42,"line":24}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: login correct login test"},{"id":"122","location":{"end":{"column":83,"line":24},"start":{"column":52,"line":24}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: login correct login test"},{"id":"123","location":{"end":{"column":12,"line":34},"start":{"column":29,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"124","location":{"end":{"column":37,"line":29},"start":{"column":30,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"125","location":{"end":{"column":16,"line":32},"start":{"column":39,"line":29}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"126","location":{"end":{"column":30,"line":30},"start":{"column":26,"line":30}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"127","location":{"end":{"column":33,"line":31},"start":{"column":29,"line":31}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"128","location":{"end":{"column":97,"line":37},"start":{"column":25,"line":36}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"132","location":{"end":{"column":10,"line":45},"start":{"column":31,"line":42}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError","description":"Error message: src/app/components/__tests__/Login.test.tsx(52,75): error TS2339: Property 'username' does not exist on type '{}'.\r\nsrc/app/components/__tests__/Login.test.tsx(53,75): error TS2339: Property 'password' does not exist on type '{}'.\r\n"},{"id":"129","location":{"end":{"column":84,"line":37},"start":{"column":39,"line":37}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed","description":"Killed by: login correct login test"},{"id":"130","location":{"end":{"column":30,"line":41},"start":{"column":8,"line":41}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"131","location":{"end":{"column":6,"line":71},"start":{"column":44,"line":41}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"133","location":{"end":{"column":25,"line":43},"start":{"column":23,"line":43}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"134","location":{"end":{"column":25,"line":44},"start":{"column":23,"line":44}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"135","location":{"end":{"column":87,"line":55},"start":{"column":42,"line":55}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"136","location":{"end":{"column":85,"line":55},"start":{"column":52,"line":55}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"137","location":{"end":{"column":87,"line":56},"start":{"column":42,"line":56}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"138","location":{"end":{"column":85,"line":56},"start":{"column":52,"line":56}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"139","location":{"end":{"column":12,"line":66},"start":{"column":29,"line":58}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed","description":"Killed by: login incorrect login test"},{"id":"140","location":{"end":{"column":37,"line":61},"start":{"column":30,"line":61}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed","description":"Killed by: login incorrect login test"},{"id":"141","location":{"end":{"column":16,"line":64},"start":{"column":39,"line":61}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed","description":"Killed by: login incorrect login test"},{"id":"143","location":{"end":{"column":33,"line":63},"start":{"column":29,"line":63}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"142","location":{"end":{"column":30,"line":62},"start":{"column":26,"line":62}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed","description":"Killed by: login incorrect login test"},{"id":"144","location":{"end":{"column":99,"line":69},"start":{"column":25,"line":68}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"145","location":{"end":{"column":84,"line":69},"start":{"column":39,"line":69}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed","description":"Killed by: login incorrect login test"}],"source":"import React from 'react';\r\nimport { LoginForm } from '../LoginForm/LoginForm'; \r\nimport {render, screen, fireEvent, waitFor} from '@testing-library/react';\r\nimport '@testing-library/jest-dom';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\ndescribe('login', () => {\r\n    it('correct login test', async () => {\r\n        const correctUser = {\r\n            username: 'testuser10',\r\n            password: 'testuser10',\r\n        }\r\n\r\n        render(<BrowserRouter>\r\n        <LoginForm />\r\n        </BrowserRouter>\r\n        )\r\n        screen.debug();\r\n        \r\n        const input_username = screen.getByPlaceholderText(/name/i);\r\n        const input_password = screen.getByPlaceholderText(/password/i);\r\n        \r\n        fireEvent.change(input_username, { target: { value: correctUser.username } });\r\n        fireEvent.change(input_password, { target: { value: correctUser.password } });\r\n\r\n        await waitFor(() => {\r\n            fireEvent(\r\n              screen.getByText(/Sign in/i),\r\n              new MouseEvent('click', {\r\n                bubbles: true,\r\n                cancelable: true,\r\n              }),\r\n            );\r\n          });\r\n      \r\n          await waitFor(() =>\r\n            expect(screen.queryByText('Username or password cannot be empty string')).toBe(null),\r\n          );\r\n    });\r\n\r\n    it('incorrect login test', async () => {\r\n        const incorrectUser = {\r\n            username: '',\r\n            password: '',\r\n        }\r\n\r\n        render(<BrowserRouter>\r\n        <LoginForm />\r\n        </BrowserRouter>)\r\n        screen.debug();\r\n        \r\n        const input_username = screen.getByPlaceholderText(/name/i);\r\n        const input_password = screen.getByPlaceholderText(/password/i);\r\n        \r\n        fireEvent.change(input_username, { target: { value: incorrectUser.username } });\r\n        fireEvent.change(input_password, { target: { value: incorrectUser.password } });\r\n\r\n        await waitFor(() => {\r\n            fireEvent(\r\n              screen.getByText(/Sign in/i),\r\n              new MouseEvent('click', {\r\n                bubbles: true,\r\n                cancelable: true,\r\n              }),\r\n            );\r\n          });\r\n      \r\n          await waitFor(() =>\r\n            expect(screen.queryByText('Username or password cannot be empty string')).toBeTruthy(),\r\n          );\r\n    });\r\n})"},"C:\\ouroboroser\\programming\\pivo-games\\src\\app\\components\\__tests__\\SignUpForm.test.tsx":{"language":"typescript","mutants":[{"id":"146","location":{"end":{"column":19,"line":9},"start":{"column":10,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"150","location":{"end":{"column":10,"line":16},"start":{"column":31,"line":11}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError","description":"Error message: src/app/components/__tests__/SignUpForm.test.tsx(21,75): error TS2339: Property 'username' does not exist on type '{}'.\r\nsrc/app/components/__tests__/SignUpForm.test.tsx(22,72): error TS2339: Property 'email' does not exist on type '{}'.\r\nsrc/app/components/__tests__/SignUpForm.test.tsx(23,75): error TS2339: Property 'password' does not exist on type '{}'.\r\nsrc/app/components/__tests__/SignUpForm.test.tsx(24,74): error TS2339: Property 'confirm' does not exist on type '{}'.\r\n"},{"id":"147","location":{"end":{"column":2,"line":47},"start":{"column":27,"line":9}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError","description":"Error message: undefinedYour test suite must contain at least one test. Error: Your test suite must contain at least one test.\n    at onResult (C:\\ouroboroser\\programming\\pivo-games\\node_modules\\@jest\\core\\build\\TestScheduler.js:175:18)\n    at C:\\ouroboroser\\programming\\pivo-games\\node_modules\\@jest\\core\\build\\TestScheduler.js:304:17\n    at C:\\ouroboroser\\programming\\pivo-games\\node_modules\\emittery\\index.js:260:13\n    at Array.map (<anonymous>)\n    at Emittery.Typed.emit (C:\\ouroboroser\\programming\\pivo-games\\node_modules\\emittery\\index.js:258:23)"},{"id":"148","location":{"end":{"column":26,"line":10},"start":{"column":8,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"149","location":{"end":{"column":6,"line":46},"start":{"column":40,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"151","location":{"end":{"column":25,"line":12},"start":{"column":23,"line":12}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"152","location":{"end":{"column":36,"line":13},"start":{"column":20,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"153","location":{"end":{"column":35,"line":14},"start":{"column":23,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"154","location":{"end":{"column":35,"line":15},"start":{"column":22,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"155","location":{"end":{"column":87,"line":26},"start":{"column":42,"line":26}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"156","location":{"end":{"column":85,"line":26},"start":{"column":52,"line":26}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"157","location":{"end":{"column":81,"line":27},"start":{"column":39,"line":27}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"158","location":{"end":{"column":79,"line":27},"start":{"column":49,"line":27}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"159","location":{"end":{"column":87,"line":28},"start":{"column":42,"line":28}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"160","location":{"end":{"column":85,"line":28},"start":{"column":52,"line":28}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"161","location":{"end":{"column":85,"line":29},"start":{"column":41,"line":29}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"162","location":{"end":{"column":83,"line":29},"start":{"column":51,"line":29}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"163","location":{"end":{"column":12,"line":39},"start":{"column":29,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"164","location":{"end":{"column":37,"line":34},"start":{"column":30,"line":34}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"165","location":{"end":{"column":16,"line":37},"start":{"column":39,"line":34}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"166","location":{"end":{"column":30,"line":35},"start":{"column":26,"line":35}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"167","location":{"end":{"column":33,"line":36},"start":{"column":29,"line":36}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"168","location":{"end":{"column":71,"line":42},"start":{"column":25,"line":41}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"169","location":{"end":{"column":58,"line":42},"start":{"column":37,"line":42}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed","description":"Killed by: sign up check validation"}],"source":"import React from 'react';\r\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\r\nimport '@testing-library/jest-dom';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\nimport { SignUpForm } from '../SignUpForm/SignUpForm';\r\nimport { nameIsValid, emailIsValid, passwordIsValid } from '../validation';\r\n\r\ndescribe('sign up', () => {\r\n    it('check validation', async () => {\r\n        const incorrectUser = {\r\n            username: '',\r\n            email: 'testuse10gmail',\r\n            password: 'testuser10',\r\n            confirm: 'testuser100',\r\n        }\r\n\r\n        render( <BrowserRouter> <SignUpForm /> </BrowserRouter> );\r\n        screen.debug();\r\n\r\n        const input_username = screen.getByPlaceholderText(/name/i);\r\n        const input_email = screen.getByPlaceholderText(/email/i);\r\n        const input_password = screen.getByPlaceholderText(/password/i);\r\n        const input_confirm = screen.getByPlaceholderText(/confirm/i);\r\n\r\n        fireEvent.change(input_username, { target: { value: incorrectUser.username } });\r\n        fireEvent.change(input_email, { target: { value: incorrectUser.email } });\r\n        fireEvent.change(input_password, { target: { value: incorrectUser.password } });\r\n        fireEvent.change(input_confirm, { target: { value: incorrectUser.confirm } });\r\n\r\n        await waitFor(() => {\r\n            fireEvent(\r\n              screen.getByText(/registration/i),\r\n              new MouseEvent('click', {\r\n                bubbles: true,\r\n                cancelable: true,\r\n              }),\r\n            );\r\n          });\r\n      \r\n          await waitFor(() =>\r\n          expect(screen.queryByText('Data is not correct')).toBe(null)\r\n          );\r\n\r\n          screen.debug()\r\n    })\r\n})"},"C:\\ouroboroser\\programming\\pivo-games\\src\\app\\components\\validation.tsx":{"language":"typescript","mutants":[{"id":"170","location":{"end":{"column":2,"line":5},"start":{"column":46,"line":3}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError","description":"Error message: src/app/components/SignUpForm/SignUpForm.tsx(25,13): error TS1345: An expression of type 'void' cannot be tested for truthiness\r\n"},{"id":"172","location":{"end":{"column":2,"line":13},"start":{"column":54,"line":11}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError","description":"Error message: src/app/components/SignUpForm/SignUpForm.tsx(25,50): error TS1345: An expression of type 'void' cannot be tested for truthiness\r\n"},{"id":"171","location":{"end":{"column":2,"line":9},"start":{"column":48,"line":7}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError","description":"Error message: src/app/components/SignUpForm/SignUpForm.tsx(25,33): error TS1345: An expression of type 'void' cannot be tested for truthiness\r\n"}],"source":"'use strict';\r\n\r\nexport const nameIsValid = (name: string) => {\r\n  return /^(?=[a-zA-Z0-9._]{4,16}$)(?!.*[_.]{2})[^_.].*[^_.]$/.test(name);\r\n};\r\n\r\nexport const emailIsValid = (email: string) => {\r\n  return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\r\n};\r\n\r\nexport const passwordIsValid = (password: string) => {\r\n  return /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/.test(password);\r\n};\r\n"},"C:\\ouroboroser\\programming\\pivo-games\\src\\app\\routes\\index.tsx":{"language":"typescript","mutants":[{"id":"173","location":{"end":{"column":2,"line":26},"start":{"column":30,"line":5}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError","description":"Error message: src/App.tsx(13,14): error TS2786: 'Routing' cannot be used as a JSX component.\r\n  Its return type 'void' is not a valid JSX element.\r\n"},{"id":"174","location":{"end":{"column":54,"line":6},"start":{"column":48,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"175","location":{"end":{"column":24,"line":8},"start":{"column":15,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"176","location":{"end":{"column":10,"line":22},"start":{"column":35,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"177","location":{"end":{"column":22,"line":13},"start":{"column":15,"line":13}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"178","location":{"end":{"column":22,"line":13},"start":{"column":15,"line":13}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"179","location":{"end":{"column":12,"line":15},"start":{"column":24,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"180","location":{"end":{"column":12,"line":21},"start":{"column":18,"line":15}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"181","location":{"end":{"column":37,"line":16},"start":{"column":17,"line":16}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"182","location":{"end":{"column":37,"line":16},"start":{"column":17,"line":16}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"183","location":{"end":{"column":37,"line":16},"start":{"column":17,"line":16}},"mutatorName":"EqualityOperator","replacement":"route.auth !== false","status":"Survived"},{"id":"184","location":{"end":{"column":37,"line":16},"start":{"column":32,"line":16}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"185","location":{"end":{"column":14,"line":18},"start":{"column":39,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"186","location":{"end":{"column":14,"line":20},"start":{"column":20,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"}],"source":"import React from 'react';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport { routes } from './routes';\r\n\r\nexport const Routing = () => {\r\n  const isLogin = Boolean(localStorage.getItem('user'));\r\n  //const isLogin = true;\r\n  console.log('Login: ', isLogin);\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        {routes.map((route, i) => {\r\n          if (isLogin) {\r\n            return ( <Route key={i} exact={route.exact} path={route.path} component={route.component} /> );\r\n          } else {\r\n            if (route.auth === false) {\r\n              return ( <Route key={i} exact={route.exact} path={route.path} component={route.component} /> );\r\n            } else { \r\n                return ( <Redirect to='/login' /> )\r\n            }\r\n          }\r\n        })}\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n"},"C:\\ouroboroser\\programming\\pivo-games\\src\\app\\routes\\routes.tsx":{"language":"typescript","mutants":[{"id":"187","location":{"end":{"column":2,"line":54},"start":{"column":34,"line":3}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"188","location":{"end":{"column":6,"line":10},"start":{"column":5,"line":5}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"189","location":{"end":{"column":18,"line":6},"start":{"column":15,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"191","location":{"end":{"column":20,"line":9},"start":{"column":16,"line":9}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"190","location":{"end":{"column":20,"line":7},"start":{"column":15,"line":7}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"192","location":{"end":{"column":6,"line":16},"start":{"column":5,"line":12}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"193","location":{"end":{"column":24,"line":13},"start":{"column":15,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"195","location":{"end":{"column":6,"line":22},"start":{"column":5,"line":18}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"194","location":{"end":{"column":20,"line":14},"start":{"column":15,"line":14}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"196","location":{"end":{"column":23,"line":19},"start":{"column":15,"line":19}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"197","location":{"end":{"column":20,"line":20},"start":{"column":15,"line":20}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"198","location":{"end":{"column":6,"line":28},"start":{"column":5,"line":24}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"199","location":{"end":{"column":25,"line":25},"start":{"column":15,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"200","location":{"end":{"column":19,"line":26},"start":{"column":15,"line":26}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"201","location":{"end":{"column":6,"line":34},"start":{"column":5,"line":30}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"203","location":{"end":{"column":19,"line":32},"start":{"column":15,"line":32}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"202","location":{"end":{"column":22,"line":31},"start":{"column":15,"line":31}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"204","location":{"end":{"column":6,"line":40},"start":{"column":5,"line":36}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"205","location":{"end":{"column":22,"line":37},"start":{"column":15,"line":37}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"206","location":{"end":{"column":19,"line":38},"start":{"column":15,"line":38}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"207","location":{"end":{"column":6,"line":46},"start":{"column":5,"line":42}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"208","location":{"end":{"column":27,"line":43},"start":{"column":15,"line":43}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"209","location":{"end":{"column":19,"line":44},"start":{"column":15,"line":44}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"210","location":{"end":{"column":6,"line":52},"start":{"column":5,"line":48}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"211","location":{"end":{"column":28,"line":49},"start":{"column":15,"line":49}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"212","location":{"end":{"column":19,"line":50},"start":{"column":15,"line":50}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"}],"source":"import * as view from '../views';\r\n\r\nexport const routes:Array<any> = [\r\n\r\n    {\r\n        path: '/',\r\n        auth: false,\r\n        component: view.Home,\r\n        exact: true\r\n    },\r\n\r\n    {\r\n        path: '/signup',\r\n        auth: false,\r\n        component: view.SignUp,\r\n    },\r\n\r\n    {\r\n        path: '/login',\r\n        auth: false,\r\n        component: view.Login,\r\n    },\r\n\r\n    {\r\n        path: '/profile',\r\n        auth: true,\r\n        component: view.Profile,\r\n    },\r\n\r\n    {\r\n        path: '/edit',\r\n        auth: true,\r\n        component: view.Edit,\r\n    },\r\n\r\n    {\r\n        path: '/song',\r\n        auth: true,\r\n        component: view.Song,\r\n    },\r\n\r\n    {\r\n        path: '/crossword',\r\n        auth: true,\r\n        component: view.Crossword,\r\n    },\r\n\r\n    {\r\n        path: '/millionare',\r\n        auth: true,\r\n        component: view.Millionare,\r\n    }\r\n\r\n];"},"C:\\ouroboroser\\programming\\pivo-games\\src\\app\\views\\Home.tsx":{"language":"typescript","mutants":[{"id":"215","location":{"end":{"column":4,"line":6},"start":{"column":12,"line":4}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError","description":"Error message: src/app/views/Home.tsx(4,3): error TS2416: Property 'render' in type 'Home' is not assignable to the same property in base type 'Component<{}, {}, any>'.\r\n  Type '() => void' is not assignable to type '() => ReactNode'.\r\n    Type 'void' is not assignable to type 'ReactNode'.\r\n"}],"source":"import React from 'react';\r\n\r\nexport class Home extends React.Component {\r\n  render() {\r\n    return <div>Home page</div>;\r\n  }\r\n}\r\n"},"C:\\ouroboroser\\programming\\pivo-games\\src\\app\\views\\Crossword.tsx":{"language":"typescript","mutants":[{"id":"213","location":{"end":{"column":2,"line":9},"start":{"column":32,"line":3}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"}],"source":"import React from 'react';\r\n\r\nexport const Crossword = () => {\r\n    return (\r\n        <div>\r\n            Crossword\r\n        </div>\r\n    )\r\n}"},"C:\\ouroboroser\\programming\\pivo-games\\src\\app\\views\\Edit.tsx":{"language":"typescript","mutants":[{"id":"214","location":{"end":{"column":2,"line":9},"start":{"column":27,"line":3}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"}],"source":"import React from 'react';\r\n\r\nexport const Edit = () => {\r\n    return (\r\n        <div>\r\n            Edit profile page\r\n        </div>\r\n    )\r\n}"},"C:\\ouroboroser\\programming\\pivo-games\\src\\app\\views\\Login.tsx":{"language":"typescript","mutants":[{"id":"216","location":{"end":{"column":2,"line":10},"start":{"column":28,"line":4}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"}],"source":"import React from 'react';\r\nimport { LoginForm } from '../components';\r\n\r\nexport const Login = () => {\r\n  return (\r\n      <>\r\n          <LoginForm />\r\n      </>\r\n  )\r\n};\r\n"},"C:\\ouroboroser\\programming\\pivo-games\\src\\app\\views\\Millionaire.tsx":{"language":"typescript","mutants":[{"id":"217","location":{"end":{"column":2,"line":9},"start":{"column":33,"line":3}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"}],"source":"import React from 'react';\r\n\r\nexport const Millionare = () => {\r\n    return (\r\n        <div>\r\n            Millionare\r\n        </div>\r\n    )\r\n}"},"C:\\ouroboroser\\programming\\pivo-games\\src\\app\\views\\Profile\\Profile.tsx":{"language":"typescript","mutants":[{"id":"218","location":{"end":{"column":2,"line":14},"start":{"column":30,"line":5}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"}],"source":"import React, { Fragment } from 'react';\r\nimport { User, Games } from '../../components';\r\nimport './Profile.scss';\r\n\r\nexport const Profile = () => {\r\n  return (\r\n    <Fragment>\r\n      <div className = 'profile'>\r\n        <User />\r\n        <Games />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n"},"C:\\ouroboroser\\programming\\pivo-games\\src\\app\\views\\Song.tsx":{"language":"typescript","mutants":[{"id":"220","location":{"end":{"column":2,"line":9},"start":{"column":27,"line":3}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"}],"source":"import React from 'react';\r\n\r\nexport const Song = () => {\r\n    return (\r\n        <div>\r\n            Song\r\n        </div>\r\n    )\r\n}"},"C:\\ouroboroser\\programming\\pivo-games\\src\\app\\views\\SignUp.tsx":{"language":"typescript","mutants":[{"id":"219","location":{"end":{"column":2,"line":10},"start":{"column":29,"line":4}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"}],"source":"import React from 'react';\r\nimport { SignUpForm } from '../components';\r\n\r\nexport const SignUp = () => {\r\n  return (\r\n    <div>\r\n      <SignUpForm />\r\n    </div>\r\n  );\r\n};\r\n"},"C:\\ouroboroser\\programming\\pivo-games\\src\\index.tsx":{"language":"typescript","mutants":[{"id":"221","location":{"end":{"column":33,"line":11},"start":{"column":27,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"import React from 'react';\nimport './index.css';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null}};